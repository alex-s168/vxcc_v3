Generating x86 assembly from LL IR is relatively easy as they are almost identical.

==== Booleans ====

> / <
Comparing unsigned with unsigned: above / below
Comparing signed with signed: greater / less

We want to pair comparisions with the conditional jumps / move instructions whenever possible:
  we can set a flag in the CPU with a comparision instruction and then just use a jmpCC or cmovCC

Example:
  cmp eax, ebx
  je .continue 

(compare eax with ebx; jump if equal)

if we are not that lucky, we have to use setCC to set a byte in memory or register (boolean)

if our boolean is bigger than one byte, we can setCC into a register and zero the upper part and then store it

We want to generate something like: 
  eq:
  ; TEMP0 = ARG0 == ARG1
    cmp ARG0, ARG1
    sete TEMP0
  ; TEMP1 = ARG2 == ARG3
    cmp ARG2, ARG3
    sete TEMP1
  ; TEMP0 = TEMP0 && TEMP1
    and TEMP0, TEMP1
  ; if (TEMP0) call()
    test TEMP0, TEMP0
    jnz call
  ; call2()
    jmp call2
for:
  void eq(int a, int b, int c, int d) {
    if (a == b && c == d) {
      call();
    } else {
      call2();
    }
  }

this is obviously not the most optimal output, but it is good enough

TODO: generate C IR for above function and investigate steps required to get wanted output
