table Instr_ETCA (
    asm              str ;  # separated by comma (aliases)
    bits             str ;
    order            str = "0,1,2,3" ; 
    operand0       ? str ;
    operand1       ? str ;
    operand2       ? str ;
    operand3       ? str ; 
    enable_if_ext  ? str ;  # enable if any of extensions (separated by comma)
    disable_if_ext ? str ;  # disable if any of extensions (separated by comma)
    size_extending   bool = false ;
    is_macro         bool = false ;
    stores_result    bool ;
) {

    const reg = "reg";
    const ctrlreg = "ctrlreg";
    const imm = "imm";

# base isa

    entry addRR asm "add"
                bits "00ss0000 aaabbb00"
                operand0 reg 
                operand1 reg 
                stores_result true 
                ;

    entry addRI asm "add"
                bits "01ss0000 aaabbbbb"
                operand0 reg 
                operand1 imm
                stores_result true 
                ;

    entry subRR asm "sub"
                bits "00ss0001 aaabbb00"
                operand0 reg 
                operand1 reg 
                stores_result true
                ;

    entry subRI asm "sub"
                bits "01ss0001 aaabbbbb"
                operand0 reg 
                operand1 imm
                stores_result true
                ;

    entry rsubRR asm "rsub"
                 bits "00ss0010 aaabbb00"
                 operand0 reg 
                 operand1 reg 
                 stores_result true
                 ;

    entry rsubRI asm "rsub"
                 bits "01ss0010 aaabbbbb"
                 operand0 reg 
                 operand1 imm
                 stores_result true
                 ;

    entry fakeNegR asm "@neg"
                   bits "01ss0010 aaa00000"
                   operand0 reg 
                   is_macro true
                   stores_result true
                   ;

    entry fakeNotR asm "@not"
                   bits "01ss0010 aaa11111"
                   operand0 reg 
                   is_macro true 
                   stores_result true
                   ;

    entry cmpRR asm "cmp"
                bits "00ss0011 aaabbb00"
                operand0 reg 
                operand1 reg 
                stores_result false 
                ;

    entry cmpRI asm "cmp"
                bits "01ss0011 aaabbbbb"
                operand0 reg 
                operand1 imm 
                stores_result false 
                ;

    entry orRR asm "or"
               bits "00ss0100 aaabbb00"
               operand0 reg 
               operand1 reg 
               stores_result true 
               ;
    
    entry orRI asm "or"
               bits "01ss0100 aaabbbbb"
               operand0 reg 
               operand1 imm
               stores_result true 
               ;

    entry xorRR asm "xor"
                bits "00ss0101 aaabbb00"
                operand0 reg 
                operand1 reg 
                stores_result true 
                ;

    entry xorRI asm "xor"
                bits "01ss0101 aaabbbbb"
                operand0 reg 
                operand1 imm
                stores_result true  
                ;

    entry andRR asm "and"
                bits "00ss0110 aaabbb00"
                operand0 reg 
                operand1 reg 
                stores_result true 
                ;

    entry andRI asm "and"
                bits "01ss0110 aaabbbbb"
                operand0 reg 
                operand1 imm 
                stores_result true 
                ;

    entry testRR asm "test"
                 bits "00ss0111 aaabbb00"
                 operand0 reg 
                 operand1 reg 
                 stores_result false 
                 ;

    entry testRI asm "test"
                 bits "01ss0111 aaabbbbb"
                 operand0 reg 
                 operand1 imm 
                 stores_result false 
                 ;

    entry movzRR asm "movz,movzx"
                 bits "00ss1000 aaabbb00"
                 operand0 reg 
                 operand1 reg 
                 stores_result  true 
                 size_extending true 
                 ;

    entry movzRI asm "movz,movzx"
                 bits "01ss1000 aaabbbbb"
                 operand0 reg 
                 operand1 imm 
                 stores_result  true
                 size_extending true 
                 ;

    entry movsRR asm "movs,movsx"
                 bits "00ss1001 aaabbb00"
                 operand0 reg 
                 operand1 reg 
                 stores_result  true 
                 size_extending true
                 ;

    entry movsRI asm "movs,movsx"
                 bits "00ss1001 aaabbbbb"
                 operand0 reg 
                 operand1 imm 
                 stores_result  true 
                 size_extending true 
                 ;

    entry loadRR asm "mov" 
                 bits "00ss1010 aaabbb00"
                 operand0 reg
                 operand1 "mem[^reg]"
                 stores_result true 
                 ;

    entry loadRI asm "mov"
                 bits "01ss1010 aaabbbbb"
                 operand0 reg
                 operand1 "mem[^imm]"
                 stores_result true
                 ;

    entry storeRR asm "store,mov"
                  bits "00ss1011 aaabbb00"
                  operand0 reg 
                  operand1 "mem[^reg]"
                  order "1,0"             # reversed
                  stores_result false 
                  ;

    entry storeRI asm "store, mov"
                  bits "01ss1011 aaabbbbb"
                  operand0 reg 
                  operand1 "mem[^imm]"
                  order "1,0"             # reversed 
                  stores_result false 
                  ;

    entry sloRI   asm "slo"
                  bits "01ss1100 aaabbbbb"
                  operand0 reg 
                  operand1 imm 
                  stores_result true 
                  ;

    entry readcrRI  asm "readcr,mov"
                    bits "01ss1110 aaabbbbb"
                    operand0 reg 
                    operand1 ctrlreg
                    stores_result true 
                    ;

    entry writecrRI asm "writecr,mov"
                    bits "01ss1111 aaabbbbb"
                    operand0 reg 
                    operand1 ctrlreg 
                    order "1,0 "          # reversed 
                    stores_result true 
                    ;

}
